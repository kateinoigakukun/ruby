name: WebAssembly
on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'

jobs:
  build-wasi-libc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          repository: WebAssembly/wasi-libc
          ref: ad5133410f66b93a2381db5b542aad5e0964db96
          submodules: true
          path: build
      - name: Install clang
        run: |
          curl -sSfL https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz | tar xJf -
          export CLANG_DIR=$(pwd)/clang+llvm-12.0.0-x86_64-linux-gnu-ubuntu-20.04/bin
          echo "$CLANG_DIR" >> $GITHUB_PATH
          echo "WASM_CC=$CLANG_DIR/clang" >> $GITHUB_ENV
      - run: make -j4
      - uses: actions/upload-artifact@v1
        with:
          name: wasi-libc
          path: build/sysroot
  make:
    strategy:
      matrix:
        entry:
          - { name: O0-debuginfo, optflags: "-O0", debugflags: "-g" }
          - { name: O1,           optflags: "-O1", debugflags: ""   }
          - { name: O2,           optflags: "-O2", debugflags: ""   }
          - { name: O3,           optflags: "-O3", debugflags: ""   }
      fail-fast: false
    env:
      RUBY_TESTOPTS: '-q --tty=no'
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
    runs-on: macos-10.15
    needs: [build-wasi-libc]
    steps:
      - run: mkdir build
        working-directory:
      - name: git config
        run: |
          git config --global advice.detachedHead 0
          git config --global init.defaultBranch garbage
      - uses: actions/checkout@v2
        with:
          path: src
      - name: Install libraries
        run: |
          set -ex
          brew upgrade
          brew install autoconf automake

          mkdir build-sdk
          pushd build-sdk
          curl -LO https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-macos.tar.gz
          tar xfz wasi-sdk-12.0-macos.tar.gz
          curl -LO https://github.com/kateinoigakukun/rb-wasm-support/releases/download/0.3.0/rb-wasm-support-wasm32-unknown-wasi.tar.gz
          tar xfz rb-wasm-support-wasm32-unknown-wasi.tar.gz
        working-directory: src
      - uses: actions/download-artifact@v2
        with:
          name: wasi-libc
          path: src/build-sdk/wasi-sysroot
      - name: Set ENV
        run: |
          echo "MAKEFLAGS=-j$((1 + $(sysctl -n hw.activecpu)))" >> $GITHUB_ENV
      - run: ./autogen.sh
        working-directory: src
      - name: Run configure
        run: |
          BUILD_SDK=$(PWD)/../src/build-sdk
          ../src/configure \
            --host wasm32-unknown-wasi \
            --with-static-linked-ext \
            --with-coroutine=asyncify \
            --disable-jit-support \
            CC=$BUILD_SDK/wasi-sdk-12.0/bin/clang \
            LD=$BUILD_SDK/wasi-sdk-12.0/bin/clang \
            AR=$BUILD_SDK/wasi-sdk-12.0/bin/llvm-ar \
            RANLIB=$BUILD_SDK/wasi-sdk-12.0/bin/llvm-ranlib \
            LDFLAGS=" \
              --sysroot=$BUILD_SDK/wasi-sysroot \
              -L$BUILD_SDK/wasi-sysroot/lib/wasm32-wasi \
              -L$BUILD_SDK/rb-wasm-support-wasm32-unknown-wasi/lib \
              -lwasi-emulated-mman \
              -lwasi-emulated-signal \
              -lwasi-emulated-getpid \
              -lwasi-emulated-process-clocks \
              -lrb_wasm_support \
              -Xlinker --stack-first \
              -Xlinker -z -Xlinker stack-size=16777216 \
            " \
            CFLAGS=" \
              --sysroot=$BUILD_SDK/wasi-sysroot \
              -I$BUILD_SDK/rb-wasm-support-wasm32-unknown-wasi/include \
              -D_WASI_EMULATED_SIGNAL \
              -D_WASI_EMULATED_MMAN \
              -D_WASI_EMULATED_GETPID \
              -D_WASI_EMULATED_PROCESS_CLOCKS \
              -DRB_WASM_SUPPORT_EMULATE_SETJMP \
            " \
            optflags="${{ matrix.entry.optflags }}" \
            debugflags="${{ matrix.entry.debugflags }}"

      - run: make miniruby
      - uses: actions/upload-artifact@v2
        with:
          name: miniruby-raw-${{ matrix.entry.name }}
          path: build/miniruby
      - run: make ruby
      - uses: actions/upload-artifact@v2
        with:
          name: ruby-raw-${{ matrix.entry.name }}
          path: build/ruby
      - run: brew install wasmtime binaryen
      - name: Asyncify
        run: |
          wasm-opt miniruby --asyncify -g -O --pass-arg=asyncify-ignore-imports -o miniruby.wasm
          wasm-opt ruby --asyncify -g -O --pass-arg=asyncify-ignore-imports -o ruby.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: miniruby.wasm
          path: build/miniruby.wasm
      - uses: actions/upload-artifact@v2
        with:
          name: ruby.wasm
          path: build/ruby.wasm
      - name: Run basictest
        run: wasmtime run ./../build/miniruby.wasm --mapdir /::./ -- /basictest/test.rb
        working-directory: src
      - name: Run bootstraptest (no thread)
        run: |
          NO_THREAD_TESTS="$(grep -L Thread -R ./bootstraptest | cut -d: -f1 | uniq | xargs basename | grep -e '^test_.*.rb$' | sed 's/test_\(.*\).rb/\1/' | paste -s -d, -)"
          ruby ./bootstraptest/runner.rb --ruby="$(which wasmtime) run $PWD/../build/ruby --mapdir /::./ -- " -j6 --verbose "--sets=$NO_THREAD_TESTS"
        working-directory: src

defaults:
  run:
    working-directory: build
